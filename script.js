// CITATIONS ----------------------------------------------------------------


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ** CERTAIN SECTIONS OF THE CODE HAVE BEEN INSPIRED BY EXTERNAL SOURCES OR BY CHATGPT. ANY CODE THAT IS NOT OUR OWN ORIGINAL WORK WILL BE MARKED WITH A COMMENT DETAILING THE SOURCES OR INSPIRATIONS. ALL INSPIRED CODE HAS BEEN MODIFIED BY OUR GROUP AND ADAPTED TO FIT THE NEEDS OF THIS PROJECT **
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// MEMORY-MATCH-CARDS
// Cheese Image - "A simple, playful illustration of a wedge of cheese." DALL-E, generated by ChatGPT, OpenAI, 4 Nov. 2024.
// Olives Image - "A simple, playful illustration of a group of green olives." DALL-E, generated by ChatGPT, OpenAI, 4 Nov. 2024.
// Tomatoes Image - "A simple, playful illustration of a cluster of red tomatoes." DALL-E, generated by ChatGPT, OpenAI, 4 Nov. 2024.
// Mushrooms Image - "A simple, playful illustration of a group of mushrooms." DALL-E, generated by ChatGPT, OpenAI, 4 Nov. 2024.
// Pepperoni Image - "A simple, playful illustration of a stack of pepperoni slices." DALL-E, generated by ChatGPT, OpenAI, 4 Nov. 2024.
// Jalapenos Image - "A simple, playful illustration of a pair of green jalape√±o peppers." DALL-E, generated by ChatGPT, OpenAI, 4 Nov. 2024.
// Onions Image- "A simple, playful illustration of a pair of onions." DALL-E, generated by ChatGPT, OpenAI, 4 Nov. 2024.
// Pineapple Image - "A simple, playful illustration of a whole pineapple." DALL-E, generated by ChatGPT, OpenAI, 4 Nov. 2024.
// Basil Image - "A simple, playful illustration of a bunch of fresh basil leaves." DALL-E, generated by ChatGPT, OpenAI, 4 Nov. 2024.
// Spinach Image - "A simple, playful illustration of a bunch of fresh spinach leaves." DALL-E, generated by ChatGPT, OpenAI, 4 Nov. 2024.
// Broccoli Image - "A simple, playful illustration of a bunch of fresh broccoli florets." DALL-E, generated by ChatGPT, OpenAI, 4 Nov. 2024.
// Pork Image - "A simple, playful illustration of a piece of pork." DALL-E, generated by ChatGPT, OpenAI, 4 Nov. 2024.



// VARIABLES -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


// state
// karan
let states = ['opening', 'mainMenu', 'wordScramble', 'pizzaMatch', 'blockStacker', 'credits']; // for reference only
let currentState = 'opening';



// audio
// isabelle & sheridan
let outside_audio;
let door_open_audio;
let playDoorOpenAudio = true;
let restaurant_audio;
let playRestaurantAudio = false;
let click_audio;
let correct_audio;
let incorrect_audio;
let isAudioPlaying = true;
let block_placing_audio;



// opening
// karan
let openingImg;
let openingAnimation;
let isOpeningAnimationPlaying = false;
let fadeOpacity = 0;
let isFading = false;


// main menu
let mainMenuImg;
let isUnfading = false;
let unfadeOpacity = 255;
let delayUnfadeStartTime = 0;
let delayUnfadeDuration = 1000;
let audioOnAnimation;
let audioOffAnimation;
let creditsAnimation;
let isDisplayingMainMenu = true;
let creditsAnimationReversed;



// word scramble
// isabelle & sheridan
let wordScrambleAnimation;
let wordScrambleAnimationReversed;
let wordScrambleDifficultyImage;
let wordScrambleEasyTransition;
let wordScrambleEasyImage;
let wordScrambleMediumTransition;
let wordScrambleMediumImage;
let wordScrambleHardTransition;
let wordScrambleHardImage;
let displayWordScrambleEasyImage = false;
let displayWordScrambleMediumImage = false;
let displayWordScrambleHardImage = false;
let wordScrambleScrambledWords = [
    'enmu', 'hefc', 'trawie', 'tineckh', 'esedstr', 'crtiepe', 'nnigid', 
    'asytrp', 'ipzza', 'ilglr', 'psou', 'aitop', 'aebtl', 'noev', 
    'baostorl', 'unbatqe', 'radeb', 'rkidn', 'sdaal', 'orrde', 
    'inenrd', 'hnclu', 'ishd', 'uslntei',' nknaip'
];
let wordScrambleUnscrambledWords = [
    'menu', 'chef', 'waiter', 'kitchen', 'dessert', 'receipt', 'dining', 
    'pastry', 'pizza', 'grill', 'soup', 'patio', 'table', 'oven', 
    'barstool', 'banquet', 'bread', 'drink', 'salad', 'order', 
    'dinner', 'lunch', 'dish', 'utensil', 'napkin'
];
let wordScrambleDifficulty = ''; // can be 'easy', 'medium', or 'hard'
let wordScrambleScrambledWord;
let wordScrambleUnscrambledWord;
let wordScrambleElapsedTime;
let wordScrambleStartTime;
let wordScrambleUnscrambleTime;
let wordScrambleRemainingTime;
let isWordScrambleWordChosen = false;
let isWordScrambleGameOver = false;
let wordScrambleInputField;
let wordScrambleEasyWonTransition;
let wordScrambleWonImage;
let wordScrambleEasyLostTransition;
let wordScrambleLostImage;
let wordScrambleMediumWonTransition;
let wordScrambleMediumLostTransition;
let wordScrambleHardWonTransition;
let wordScrambleHardLostTransition;
let resetWordScramble = false;
let wordScrambleMainMenuTransition;
let wordScrambleLostPlayAgainTransition;
let wordScrambleWonPlayAgainTransition;
let isWordScrambleWon;



// pizza match
// karan
let pizzaMatchAnimation;
let pizzaMatchAnimationReversed;
let pizzaMatchDifficultyImg;
let pizzaMatchIngredients = ['basil', 'broccoli', 'cheese', 'jalapenos', 'mushrooms', 'olives', 'onions', 'pepperoni', 'pineapple', 'pork', 'spinach', 'tomatoes'];
let pizzaMatchIngredientImages = [];
let pizzaMatchTargetIngredients = [];
let pizzaMatchSelectedCards = [];
let pizzaMatchScore = 0;
let pizzaMatchDifficulty = ''; // can be 'easy', 'medium', or 'hard'
let isPizzaMatchRandomIngredientsChosen = false;
let pizzaMatchStartTime;
let pizzaMatchElapsedTime;
let pizzaMatchMemorizationTime = 7;
let pizzaMatchRemainingTime;
let pizzaMatchCorrectlyMatched = false;
let isPizzaMatchGameOver = false;
let isPizzaMatchSelectedCardsReset = false;
let pizzaMatchEasyButton;
let pizzaMatchMediumButton;
let pizzaMatchHardButton;
let cookPizzaButton;
let playPizzaMatchAgainButton;
let pizzaMatchJournalTransition;
let pizzaMatchJournalImage;
let displayPizzaMatchJournalImage = false;
let pizzaMatchCardsTransition;
let pizzaMatchCardsImage;
let displayPizzaMatchCardsImage = false;
let hasPizzaMatchCardsTransitionPlayed = false;
let pizzaMatchIncorrectMatchTransition;
let pizzaMatchCorrectMatchTransition;
let pizzaMatchIncorrectMatchImage;
let pizzaMatchCorrectMatchImage;
let pizzaMatchCorrectMatchMainMenuTransition;
let pizzaMatchCorrectMatchPlayAgainTransition;
let pizzaMatchIncorrectMatchMainMenuTransition;
let pizzaMatchIncorrectMatchPlayAgainTransition;




// block stacker
let blockStackerAnimation;
let blockStackerAnimationReversed;
let blockStackerDifficultyImage;
let blockStackerGameTransition;
let blockStackerGameImage;
let blockWidth;
let blockHeight;
let currentBlock;
let blockDir;
let blockSpeed;
let placedBlocks = [];
let blockStackerLostTransition;
let blockStackerLostImage;
let blockStackerWonTransition;
let blockStackerWonImage;
let blockStacker
let isBlockStackerPlaying = false;
let isBlockStackerGameWon = false;
let isBlockStackerGameLost = false;
let blockStackerDifficulty = ''; // can be 'easy', 'medium', or 'hard'
let woodTexture;
let blockStackerWonPlayAgainTransition;
let blockStackerLostPlayAgainTransition;
let blockStackerWonMainMenuTransition;
let blockStackerLostMainMenuTransition;
let isBlockStackerWon = false;







// SETUP ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


// karan, isabelle, sheridan, & matthew
function preload() {



    // audio
    outside_audio = loadSound('assets/audio/outside_audio.mp3');
    door_open_audio = loadSound('assets/audio/door_open_audio.mp3');
    restaurant_audio = loadSound('assets/audio/restaurant_audio.mp3');
    click_audio = loadSound('assets/audio/click_audio.mp3');
    correct_audio = loadSound('assets/audio/correct_audio.mp3');
    incorrect_audio = loadSound('assets/audio/incorrect_audio.mp3');
    block_placing_audio = loadSound('assets/audio/block_placing_audio.mp3');


    // opening
    openingImg = loadImage('assets/opening/opening_image.png');
    openingAnimation = createVideo(['assets/opening/opening_animation1.mp4']);
    openingAnimation.hide();


    // main menu
    mainMenuImg = loadImage('assets/main_menu/main_menu_image1.png');
    audioOnAnimation = createVideo(['assets/main_menu/audio_on_animation.mp4']);
    audioOnAnimation.hide();
    audioOffAnimation = createVideo(['assets/main_menu/audio_off_animation.mp4']);
    audioOffAnimation.hide();
    creditsAnimation = createVideo(['assets/main_menu/credits_animation.mp4']);
    creditsAnimation.hide();
    creditsAnimationReversed = createVideo(['assets/main_menu/credits_animation_reversed.mp4']);
    creditsAnimationReversed.hide();


    // word scramble
    wordScrambleAnimation = createVideo(['assets/word_scramble/word_scramble_animation.mp4']);
    wordScrambleAnimation.hide();
    wordScrambleAnimationReversed = createVideo(['assets/word_scramble/word_scramble_animation_reversed.mp4']);
    wordScrambleAnimationReversed.hide();
    wordScrambleDifficultyImage = loadImage('assets/word_scramble/word_scramble_difficulty_image.png');
    wordScrambleEasyTransition = createVideo(['assets/word_scramble/word_scramble_easy_transition.mp4']);
    wordScrambleEasyTransition.hide();
    wordScrambleEasyImage = loadImage('assets/word_scramble/word_scramble_easy_image.png');
    wordScrambleMediumTransition = createVideo(['assets/word_scramble/word_scramble_medium_transition.mp4']);
    wordScrambleMediumTransition.hide();
    wordScrambleMediumImage = loadImage('assets/word_scramble/word_scramble_medium_image.png');
    wordScrambleHardTransition = createVideo(['assets/word_scramble/word_scramble_hard_transition.mp4']);
    wordScrambleHardTransition.hide();
    wordScrambleHardImage = loadImage('assets/word_scramble/word_scramble_hard_image.png');
    wordScrambleEasyWonTransition = createVideo(['assets/word_scramble/word_scramble_easy_won_transition.mp4']);
    wordScrambleEasyWonTransition.hide();
    wordScrambleWonImage = loadImage('assets/word_scramble/word_scramble_won_image.png');
    wordScrambleEasyLostTransition = createVideo(['assets/word_scramble/word_scramble_easy_lost_transition.mp4']);
    wordScrambleEasyLostTransition.hide();
    wordScrambleLostImage = loadImage('assets/word_scramble/word_scramble_lost_image.png');
    wordScrambleMediumWonTransition = createVideo(['assets/word_scramble/word_scramble_medium_won_transition.mp4']);
    wordScrambleMediumWonTransition.hide();
    wordScrambleMediumLostTransition = createVideo(['assets/word_scramble/word_scramble_medium_lost_transition.mp4']);
    wordScrambleMediumLostTransition.hide();
    wordScrambleHardWonTransition = createVideo(['assets/word_scramble/word_scramble_hard_won_transition.mp4']);
    wordScrambleHardWonTransition.hide();
    wordScrambleHardLostTransition = createVideo(['assets/word_scramble/word_scramble_hard_lost_transition.mp4']);
    wordScrambleHardLostTransition.hide();
    wordScrambleMainMenuTransition = createVideo(['assets/word_scramble/word_scramble_main_menu_transition.mp4']);
    wordScrambleMainMenuTransition.hide();
    wordScrambleLostPlayAgainTransition = createVideo(['assets/word_scramble/word_scramble_lost_play_again_transition.mp4']);
    wordScrambleLostPlayAgainTransition.hide();
    wordScrambleWonPlayAgainTransition = createVideo(['assets/word_scramble/word_scramble_won_play_again_transition.mp4']);
    wordScrambleWonPlayAgainTransition.hide();


    // pizza match
    for (let ingredient of pizzaMatchIngredients) {
        pizzaMatchIngredientImages.push(loadImage(`assets/memory_match/memory_match_cards/${ingredient}.png`));
    }
    pizzaMatchDifficultyImg = loadImage('assets/pizza_match/pizza_match_difficulty_image.png');
    pizzaMatchAnimation = createVideo(['assets/pizza_match/pizza_match_animation1.mp4']);
    pizzaMatchAnimation.hide();
    pizzaMatchAnimationReversed = createVideo(['assets/pizza_match/pizza_match_animation1_reversed.mp4']);
    pizzaMatchAnimationReversed.hide();
    pizzaMatchJournalTransition = createVideo(['assets/pizza_match/pizza_match_journal_transition.mp4']);
    pizzaMatchJournalTransition.hide();
    pizzaMatchJournalImage = loadImage('assets/pizza_match/pizza_match_journal_image.png');
    pizzaMatchCardsTransition = createVideo(['assets/pizza_match/pizza_match_cards_transition.mp4']);
    pizzaMatchCardsTransition.hide();
    pizzaMatchCardsImage = loadImage('assets/pizza_match/pizza_match_cards_image.png');
    pizzaMatchIncorrectMatchTransition = createVideo(['assets/pizza_match/pizza_match_incorrect-match_transition.mp4']);
    pizzaMatchIncorrectMatchTransition.hide();
    pizzaMatchIncorrectMatchImage = loadImage('assets/pizza_match/pizza_match_incorrect-match_image.png');
    pizzaMatchCorrectMatchTransition = createVideo(['assets/pizza_match/pizza_match_correct-match_transition.mp4']);
    pizzaMatchCorrectMatchTransition.hide();
    pizzaMatchCorrectMatchImage = loadImage('assets/pizza_match/pizza_match_correct-match_image.png');
    pizzaMatchCorrectMatchMainMenuTransition = createVideo(['assets/pizza_match/pizza_match_correct_match_main_menu_transition.mp4']);
    pizzaMatchCorrectMatchMainMenuTransition.hide();
    pizzaMatchCorrectMatchPlayAgainTransition = createVideo(['assets/pizza_match/pizza_match_correct_match_play_again_transition.mp4']);
    pizzaMatchCorrectMatchPlayAgainTransition.hide();
    pizzaMatchIncorrectMatchPlayAgainTransition = createVideo(['assets/pizza_match/pizza_match_incorrect-match_play_again_transition.mp4']);
    pizzaMatchIncorrectMatchPlayAgainTransition.hide();
    pizzaMatchIncorrectMatchMainMenuTransition = createVideo(['assets/pizza_match/pizza_match_incorrect-match_main_menu_transition.mp4']);
    pizzaMatchIncorrectMatchMainMenuTransition.hide();




    // block stacker
    blockStackerAnimation = createVideo(['assets/block_stacker/block_stacker_animation.mp4']);
    blockStackerAnimation.hide();
    blockStackerAnimationReversed = createVideo(['assets/block_stacker/block_stacker_animation_reversed.mp4']);
    blockStackerAnimationReversed.hide();
    blockStackerDifficultyImage = loadImage('assets/block_stacker/block_stacker_difficulty_image.png');
    blockStackerGameTransition = createVideo(['assets/block_stacker/block_stacker_game_transition.mp4']);
    blockStackerGameTransition.hide();
    blockStackerGameImage = loadImage('assets/block_stacker/block_stacker_game_image.png');
    blockStackerLostTransition = createVideo(['assets/block_stacker/block_stacker_lost_transition.mp4']);
    blockStackerLostTransition.hide();
    blockStackerLostImage = loadImage('assets/block_stacker/block_stacker_lost_image.png');
    blockStackerWonTransition = createVideo(['assets/block_stacker/block_stacker_won_transition.mp4']);
    blockStackerWonTransition.hide();
    blockStackerWonImage = loadImage('assets/block_stacker/block_stacker_won_image.png');
    woodTexture = loadImage('assets/wood_button_texture.png');
    blockStackerWonPlayAgainTransition = createVideo(['assets/block_stacker/block_stacker_won_play_again_transition.mp4']);
    blockStackerWonPlayAgainTransition.hide();
    blockStackerLostPlayAgainTransition = createVideo(['assets/block_stacker/block_stacker_lost_play_again_transition.mp4']);
    blockStackerLostPlayAgainTransition.hide();
    blockStackerWonMainMenuTransition = createVideo(['assets/block_stacker/block_stacker_won_main_menu_transition.mp4']);
    blockStackerWonMainMenuTransition.hide();
    blockStackerLostMainMenuTransition = createVideo(['assets/block_stacker/block_stacker_lost_main_menu_transition.mp4']);
    blockStackerLostMainMenuTransition.hide();



}


// karan, matthew
// Code inspired by ChatGPT -- https://chat.openai.com/ -- [CSS Styling for Animations + Input Field]
function setup() {

    // canvas
    createCanvas(windowWidth, windowHeight);


    // opening 
    openingAnimation.size(width, height);
    openingAnimation.style('position', 'absolute');
    openingAnimation.style('z-index', '-1');
    openingAnimation.speed(0.6);
    openingAnimation.onended(() => {
        isFading = true;
    });


    // main menu

        // buttons
    createMainMenuButtons();
    createWordScrambleButtons();
    createPizzaMatchButtons();
    createBlockStackerButtons();
    createCreditsButtons();

        // audio on animation
    audioOnAnimation.size(width, height);
    audioOnAnimation.style('position', 'fixed');
    audioOnAnimation.style('object-fit', 'fill');
    audioOnAnimation.style('z-index', '1');
    audioOnAnimation.onended(() => {
        wordScrambleButton.show();
        pizzaMatchButton.show();
        blockStackerButton.show();
        audioButton.show();
        creditsButton.show();
        audioOnAnimation.hide();
        isAudioPlaying = true;
    });
        // audio off animation
    audioOffAnimation.size(width, height);
    audioOffAnimation.style('position', 'fixed');
    audioOffAnimation.style('object-fit', 'fill');
    audioOffAnimation.style('z-index', '1');
    audioOffAnimation.onended(() => {
        wordScrambleButton.show();
        pizzaMatchButton.show();
        blockStackerButton.show();
        audioButton.show();
        creditsButton.show();
        audioOffAnimation.hide();
        isAudioPlaying = false;
    });
        // credits animation
    creditsAnimation.size(width, height);
    creditsAnimation.style('position', 'fixed');
    creditsAnimation.style('object-fit', 'fill');
    creditsAnimation.style('z-index', '1');
    creditsAnimation.onended(() => {
        creditsBackButton.show();
    });
        // credits animation reversed
    creditsAnimationReversed.size(width, height);
    creditsAnimationReversed.style('position', 'fixed');
    creditsAnimationReversed.style('object-fit', 'fill');
    creditsAnimationReversed.style('z-index', '1');
    creditsAnimationReversed.onended(() => {
        wordScrambleButton.show();
        pizzaMatchButton.show();
        blockStackerButton.show();
        audioButton.show();
        creditsButton.show();
        creditsAnimationReversed.hide();
    });






    // word scramble

        // input field
    wordScrambleInputField = createInput();
    wordScrambleInputField.hide();
    wordScrambleInputField.position(windowWidth / 2.7, windowHeight / 1.2);
    wordScrambleInputField.size(windowWidth / 4, windowHeight / 20);
    wordScrambleInputField.style('background-image', 'url("assets/wood_button_texture.png")');
    wordScrambleInputField.style('background-size', 'cover'); // Ensures the texture covers the input area
    wordScrambleInputField.style("border", "1px solid #8B4513"); // Darker brown to match wood
    wordScrambleInputField.style("border-radius", "5px");
    wordScrambleInputField.style("padding", "4px");
    wordScrambleInputField.style("color", "#222"); // Darker color for better contrast
    wordScrambleInputField.style("font-size", "20px");
    wordScrambleInputField.style("font-weight", "600");
    wordScrambleInputField.style("font-family", "Georgia, serif"); // More fitting to the wood theme
    wordScrambleInputField.style("box-shadow", "0 6px 12px rgba(0, 0, 0, 0.2)"); // Enhanced shadow for lift
    wordScrambleInputField.style("transition", "0.3s all ease-in-out"); // Smooth animations
    
    // Add hover effect for better interactivity
    wordScrambleInputField.mouseOver(() => {
        wordScrambleInputField.style("box-shadow", "0 8px 16px rgba(0, 0, 0, 0.3)");
        wordScrambleInputField.style("transform", "scale(1.05)");
    });
    
    wordScrambleInputField.mouseOut(() => {
        wordScrambleInputField.style("box-shadow", "0 6px 12px rgba(0, 0, 0, 0.2)");
        wordScrambleInputField.style("transform", "scale(1)");
    });

        // word scramble animation
    wordScrambleAnimation.size(width, height);
    wordScrambleAnimation.style('position', 'fixed');
    wordScrambleAnimation.style('object-fit', 'fill');
    wordScrambleAnimation.style('z-index', '1');
    wordScrambleAnimation.onended(() => {
            // hide animation
        wordScrambleAnimation.hide();
        background(wordScrambleDifficultyImage);
            // display game buttons
        wordScrambleBackButton.show();
        wordScrambleEasyButton.show();
        wordScrambleMediumButton.show();
        wordScrambleHardButton.show();
    });
        // word scramble animation reversed
    wordScrambleAnimationReversed.size(width, height);
    wordScrambleAnimationReversed.style('position', 'fixed');
    wordScrambleAnimationReversed.style('object-fit', 'fill');
    wordScrambleAnimationReversed.style('z-index', '1');
    wordScrambleAnimationReversed.onended(() => {
            // hide animation
        wordScrambleAnimationReversed.hide();
        background(mainMenuImg);
            // display main menu buttons
        wordScrambleButton.show();
        pizzaMatchButton.show();
        blockStackerButton.show();
        audioButton.show();
        creditsButton.show();
            // change state
        currentState = '';
    });
        // word scramble easy transition
    wordScrambleEasyTransition.size(width, height);
    wordScrambleEasyTransition.style('position', 'fixed');
    wordScrambleEasyTransition.style('object-fit', 'fill');
    wordScrambleEasyTransition.style('z-index', '1');
    wordScrambleEasyTransition.onended(() => {
            // hide animation
        wordScrambleEasyTransition.hide();
        background(wordScrambleEasyImage);
    });
        // word scramble medium transition
    wordScrambleMediumTransition.size(width, height);
    wordScrambleMediumTransition.style('position', 'fixed');
    wordScrambleMediumTransition.style('object-fit', 'fill');
    wordScrambleMediumTransition.style('z-index', '1');
    wordScrambleMediumTransition.onended(() => {
            // hide animation
        wordScrambleMediumTransition.hide();
        background(wordScrambleMediumImage);
    });
        // word scramble hard transition
    wordScrambleHardTransition.size(width, height);
    wordScrambleHardTransition.style('position', 'fixed');
    wordScrambleHardTransition.style('object-fit', 'fill');
    wordScrambleHardTransition.style('z-index', '1');
    wordScrambleHardTransition.onended(() => {
            // hide animation
        wordScrambleHardTransition.hide();
        background(wordScrambleHardImage);
    });
        // word scramble easy won transition
    wordScrambleEasyWonTransition.size(width, height);
    wordScrambleEasyWonTransition.style('position', 'fixed');
    wordScrambleEasyWonTransition.style('object-fit', 'fill');
    wordScrambleEasyWonTransition.style('z-index', '1');
    wordScrambleEasyWonTransition.onended(() => {
            // hide animation
        wordScrambleEasyWonTransition.hide();
        background(wordScrambleWonImage);
            // display end screen buttons
        wordScrambleQuitButton.show();
        wordScramblePlayAgainButton.show();
    });
        // word scramble easy lost transition
    wordScrambleEasyLostTransition.size(width, height);
    wordScrambleEasyLostTransition.style('position', 'fixed');
    wordScrambleEasyLostTransition.style('object-fit', 'fill');
    wordScrambleEasyLostTransition.style('z-index', '1');
    wordScrambleEasyLostTransition.onended(() => {
            // hide animation
        wordScrambleEasyLostTransition.hide();
        background(wordScrambleLostImage);
            // display end screen buttons
        wordScrambleQuitButton.show();
        wordScramblePlayAgainButton.show();
    });
        // word scramble medium won transition
    wordScrambleMediumWonTransition.size(width, height);
    wordScrambleMediumWonTransition.style('position', 'fixed');
    wordScrambleMediumWonTransition.style('object-fit', 'fill');
    wordScrambleMediumWonTransition.style('z-index', '1');
    wordScrambleMediumWonTransition.onended(() => {
            // hide animation
        wordScrambleMediumWonTransition.hide();
        background(wordScrambleWonImage);
            // display end screen buttons
        wordScrambleQuitButton.show();
        wordScramblePlayAgainButton.show();
    });
        // word scramble medium lost transition
    wordScrambleMediumLostTransition.size(width, height);
    wordScrambleMediumLostTransition.style('position', 'fixed');
    wordScrambleMediumLostTransition.style('object-fit', 'fill');
    wordScrambleMediumLostTransition.style('z-index', '1');
    wordScrambleMediumLostTransition.onended(() => {
            // hide animation
        wordScrambleMediumLostTransition.hide();
        background(wordScrambleLostImage);
            // display end screen buttons
        wordScrambleQuitButton.show();
        wordScramblePlayAgainButton.show();
    });
        // word scramble hard won transition
    wordScrambleHardWonTransition.size(width, height);
    wordScrambleHardWonTransition.style('position', 'fixed');
    wordScrambleHardWonTransition.style('object-fit', 'fill');
    wordScrambleHardWonTransition.style('z-index', '1');
    wordScrambleHardWonTransition.onended(() => {
            // hide animation
        wordScrambleHardWonTransition.hide();
        background(wordScrambleWonImage);
            // display end screen buttons
        wordScrambleQuitButton.show();
        wordScramblePlayAgainButton.show();
    });
        // word scramble hard lost transition
    wordScrambleHardLostTransition.size(width, height);
    wordScrambleHardLostTransition.style('position', 'fixed');
    wordScrambleHardLostTransition.style('object-fit', 'fill');
    wordScrambleHardLostTransition.style('z-index', '1');
    wordScrambleHardLostTransition.onended(() => {
            // hide animation
        wordScrambleHardLostTransition.hide();
        background(wordScrambleLostImage);
            // display end screen buttons
        wordScrambleQuitButton.show();
        wordScramblePlayAgainButton.show();
    });
        // word scramble main menu transition
    wordScrambleMainMenuTransition.size(width, height);
    wordScrambleMainMenuTransition.style('position', 'fixed');
    wordScrambleMainMenuTransition.style('object-fit', 'fill');
    wordScrambleMainMenuTransition.style('z-index', '1');
    wordScrambleMainMenuTransition.onended(() => {
            // hide animation
        wordScrambleMainMenuTransition.hide();
        background(mainMenuImg);
            // display main menu buttons
        wordScrambleButton.show();
        pizzaMatchButton.show();
        blockStackerButton.show();
        audioButton.show();
        creditsButton.show();
            // change state
        currentState = '';
    });
        // word scramble lost play again transition
    wordScrambleLostPlayAgainTransition.size(width, height);
    wordScrambleLostPlayAgainTransition.style('position', 'fixed');
    wordScrambleLostPlayAgainTransition.style('object-fit', 'fill');
    wordScrambleLostPlayAgainTransition.style('z-index', '1');
    wordScrambleLostPlayAgainTransition.onended(() => {
            // hide animation
        wordScrambleLostPlayAgainTransition.hide();
        background(wordScrambleDifficultyImage);
            // display game buttons
        wordScrambleBackButton.show();
        wordScrambleEasyButton.show();
        wordScrambleMediumButton.show();
        wordScrambleHardButton.show();
    });
        /// word scramble won play again transition
    wordScrambleWonPlayAgainTransition.size(width, height);
    wordScrambleWonPlayAgainTransition.style('position', 'fixed');
    wordScrambleWonPlayAgainTransition.style('object-fit', 'fill');
    wordScrambleWonPlayAgainTransition.style('z-index', '1');
    wordScrambleWonPlayAgainTransition.onended(() => {
            // hide animation
        wordScrambleWonPlayAgainTransition.hide();
        background(wordScrambleDifficultyImage);
            // display game buttons
        wordScrambleBackButton.show();
        wordScrambleEasyButton.show();
        wordScrambleMediumButton.show();
        wordScrambleHardButton.show();
    });




    // pizza match

        // pizza match animation
    pizzaMatchAnimation.size(width, height);
    pizzaMatchAnimation.style('position', 'fixed');
    pizzaMatchAnimation.style('object-fit', 'fill');
    pizzaMatchAnimation.style('z-index', '1');
    pizzaMatchAnimation.onended(() => {
            // hide animation
        pizzaMatchAnimation.hide();
        background(pizzaMatchDifficultyImg);
            // display game buttons
        pizzaMatchBackButton.show();
        pizzaMatchEasyButton.show();
        pizzaMatchMediumButton.show();
        pizzaMatchHardButton.show();
    });
        // pizza match animation reversed
    pizzaMatchAnimationReversed.size(width, height);
    pizzaMatchAnimationReversed.style('position', 'fixed');
    pizzaMatchAnimationReversed.style('object-fit', 'fill');
    pizzaMatchAnimationReversed.style('z-index', '1');
    pizzaMatchAnimationReversed.onended(() => {
            // hide animation
        pizzaMatchAnimationReversed.hide();
        background(mainMenuImg);
            // display main menu buttons
        wordScrambleButton.show();
        pizzaMatchButton.show();
        blockStackerButton.show();
        audioButton.show();
        creditsButton.show();
            // change state
        currentState = '';
    });
        // pizza match journal transition
    pizzaMatchJournalTransition.size(width, height);
    pizzaMatchJournalTransition.style('position', 'fixed');
    pizzaMatchJournalTransition.style('object-fit', 'fill');
    pizzaMatchJournalTransition.style('z-index', '1');
    pizzaMatchJournalTransition.onended(() => {
            // hide animation
        pizzaMatchJournalTransition.hide();
        displayPizzaMatchJournalImage = true;
    });
        // pizza match cards transition
    pizzaMatchCardsTransition.size(width, height);
    pizzaMatchCardsTransition.style('position', 'fixed');
    pizzaMatchCardsTransition.style('object-fit', 'fill');
    pizzaMatchCardsTransition.style('z-index', '1');
    pizzaMatchCardsTransition.onended(() => {
            // hide animation
        pizzaMatchCardsTransition.hide();
        displayPizzaMatchCardsImage = true;
            // display ingredient buttons
        pizzaMatchBasilButton.show();
        pizzaMatchBroccoliButton.show();
        pizzaMatchCheeseButton.show();
        pizzaMatchJalapenosButton.show();
        pizzaMatchMushroomsButton.show();
        pizzaMatchOlivesButton.show();
        pizzaMatchOnionsButton.show();
        pizzaMatchPepperoniButton.show();
        pizzaMatchPineappleButton.show();
        pizzaMatchPorkButton.show();
        pizzaMatchSpinachButton.show();
        pizzaMatchTomatoButton.show();
    });
        // pizza match incorrect match transition
    pizzaMatchIncorrectMatchTransition.size(width, height);
    pizzaMatchIncorrectMatchTransition.style('position', 'fixed');
    pizzaMatchIncorrectMatchTransition.style('object-fit', 'fill');
    pizzaMatchIncorrectMatchTransition.style('z-index', '1');
    pizzaMatchIncorrectMatchTransition.onended(() => {
            // hide animation
        pizzaMatchIncorrectMatchTransition.hide();
        background(pizzaMatchIncorrectMatchImage);
            // display end screen buttons
        pizzaMatchQuitButton.show();
        pizzaMatchPlayAgainButton.show();
    });
        // pizza match correct match transition
    pizzaMatchCorrectMatchTransition.size(width, height);
    pizzaMatchCorrectMatchTransition.style('position', 'fixed');
    pizzaMatchCorrectMatchTransition.style('object-fit', 'fill');
    pizzaMatchCorrectMatchTransition.style('z-index', '1');
    pizzaMatchCorrectMatchTransition.onended(() => {
            // hide animation
        pizzaMatchCorrectMatchTransition.hide();
        background(pizzaMatchCorrectMatchImage);
            // display end screen buttons
        pizzaMatchQuitButton.show();
        pizzaMatchPlayAgainButton.show();
    });
        // pizza match correct match main menu transition
    pizzaMatchCorrectMatchMainMenuTransition.size(width, height);
    pizzaMatchCorrectMatchMainMenuTransition.style('position', 'fixed');
    pizzaMatchCorrectMatchMainMenuTransition.style('object-fit', 'fill');
    pizzaMatchCorrectMatchMainMenuTransition.style('z-index', '1');
    pizzaMatchCorrectMatchMainMenuTransition.onended(() => {
            // hide animation
        pizzaMatchCorrectMatchMainMenuTransition.hide();
        background(mainMenuImg);
            // display main menu buttons
        wordScrambleButton.show();
        pizzaMatchButton.show();
        blockStackerButton.show();
        audioButton.show();
        creditsButton.show();
            // change state
        currentState = '';
    });
        // pizza match correct match play again transition
    pizzaMatchCorrectMatchPlayAgainTransition.size(width, height);
    pizzaMatchCorrectMatchPlayAgainTransition.style('position', 'fixed');
    pizzaMatchCorrectMatchPlayAgainTransition.style('object-fit', 'fill');
    pizzaMatchCorrectMatchPlayAgainTransition.style('z-index', '1');
    pizzaMatchCorrectMatchPlayAgainTransition.onended(() => {
            // hide animation
        pizzaMatchCorrectMatchPlayAgainTransition.hide();
        background(pizzaMatchDifficultyImg);
            // display game buttons
        pizzaMatchBackButton.show();
        pizzaMatchEasyButton.show();
        pizzaMatchMediumButton.show();
        pizzaMatchHardButton.show();
    });
        // pizza match incorrect match play again transition
    pizzaMatchIncorrectMatchPlayAgainTransition.size(width, height);
    pizzaMatchIncorrectMatchPlayAgainTransition.style('position', 'fixed');
    pizzaMatchIncorrectMatchPlayAgainTransition.style('object-fit', 'fill');
    pizzaMatchIncorrectMatchPlayAgainTransition.style('z-index', '1');
    pizzaMatchIncorrectMatchPlayAgainTransition.onended(() => {
            // hide animation
        pizzaMatchIncorrectMatchPlayAgainTransition.hide();
        background(pizzaMatchDifficultyImg);
            // display game buttons
        pizzaMatchBackButton.show();
        pizzaMatchEasyButton.show();
        pizzaMatchMediumButton.show();
        pizzaMatchHardButton.show();
    });
        // pizza match incorrect match main menu transition
    pizzaMatchIncorrectMatchMainMenuTransition.size(width, height);
    pizzaMatchIncorrectMatchMainMenuTransition.style('position', 'fixed');
    pizzaMatchIncorrectMatchMainMenuTransition.style('object-fit', 'fill');
    pizzaMatchIncorrectMatchMainMenuTransition.style('z-index', '1');
    pizzaMatchIncorrectMatchMainMenuTransition.onended(() => {
            // hide animation
        pizzaMatchIncorrectMatchMainMenuTransition.hide();
        background(mainMenuImg);
            // display main menu buttons
        wordScrambleButton.show();
        pizzaMatchButton.show();
        blockStackerButton.show();
        audioButton.show();
        creditsButton.show();
            // change state
        currentState = '';
    });




    // block stacker

        // block stacker animation
    blockStackerAnimation.size(width, height);
    blockStackerAnimation.style('position', 'fixed');
    blockStackerAnimation.style('object-fit', 'fill');
    blockStackerAnimation.style('z-index', '1');
    blockStackerAnimation.onended(() => {
            // hide animation
        blockStackerBackButton.show();
        blockStackerAnimation.hide();
        background(blockStackerDifficultyImage);
            // display game buttons
        blockStackerBackButton.show();
        blockStackerEasyButton.show();
        blockStackerMediumButton.show();
        blockStackerHardButton.show();
    });
        // block stacker animation reversed
    blockStackerAnimationReversed.size(width, height);
    blockStackerAnimationReversed.style('position', 'fixed');
    blockStackerAnimationReversed.style('object-fit', 'fill');
    blockStackerAnimationReversed.style('z-index', '1');
    blockStackerAnimationReversed.onended(() => {
            // hide animation
        blockStackerAnimationReversed.hide();
            // display main menu buttons
        wordScrambleButton.show();
        pizzaMatchButton.show();
        blockStackerButton.show();
        audioButton.show();
        creditsButton.show();
            // change state & background
            currentState = '';
        background(mainMenuImg);
    });
        // block stacker game transition
    blockStackerGameTransition.size(width, height);
    blockStackerGameTransition.style('position', 'fixed');
    blockStackerGameTransition.style('object-fit', 'fill');
    blockStackerGameTransition.style('z-index', '1');
    blockStackerGameTransition.onended(() => {
            // hide animation
        blockStackerGameTransition.hide();
        background(blockStackerGameImage);
            // play game
        isBlockStackerPlaying = true;
        newBlockStackerGame();
    });
        // block stacker lost transition
    blockStackerLostTransition.size(width, height);
    blockStackerLostTransition.style('position', 'fixed');
    blockStackerLostTransition.style('object-fit', 'fill');
    blockStackerLostTransition.style('z-index', '1');
    blockStackerLostTransition.onended(() => {
            // hide animation
        blockStackerLostTransition.hide();
        background(blockStackerLostImage);
            // display end screen buttons
        blockStackerQuitButton.show();
        blockStackerPlayAgainButton.show();
    });
        // block stacker won transition
    blockStackerWonTransition.size(width, height);
    blockStackerWonTransition.style('position', 'fixed');
    blockStackerWonTransition.style('object-fit', 'fill');
    blockStackerWonTransition.style('z-index', '1');
    blockStackerWonTransition.onended(() => {
            // hide animation
        blockStackerWonTransition.hide();
        background(blockStackerWonImage);
            // display end screen buttons
        blockStackerQuitButton.show();
        blockStackerPlayAgainButton.show();
    });
        // block stacker won play again transition
    blockStackerWonPlayAgainTransition.size(width, height);
    blockStackerWonPlayAgainTransition.style('position', 'fixed');
    blockStackerWonPlayAgainTransition.style('object-fit', 'fill');
    blockStackerWonPlayAgainTransition.style('z-index', '1');
    blockStackerWonPlayAgainTransition.onended(() => {
            // hide animation
        blockStackerWonPlayAgainTransition.hide();
        background(blockStackerDifficultyImage);
            // display game buttons
        blockStackerBackButton.show();
        blockStackerEasyButton.show();
        blockStackerMediumButton.show();
        blockStackerHardButton.show();
    });
        // block stacker lost play again transition
    blockStackerLostPlayAgainTransition.size(width, height);
    blockStackerLostPlayAgainTransition.style('position', 'fixed');
    blockStackerLostPlayAgainTransition.style('object-fit', 'fill');
    blockStackerLostPlayAgainTransition.style('z-index', '1');
    blockStackerLostPlayAgainTransition.onended(() => {
            // hide animation
        blockStackerLostPlayAgainTransition.hide();
        background(blockStackerDifficultyImage);
            // display game buttons
        blockStackerBackButton.show();
        blockStackerEasyButton.show();
        blockStackerMediumButton.show();
        blockStackerHardButton.show();
    });
        // block stacker won main menu transition
    blockStackerWonMainMenuTransition.size(width, height);
    blockStackerWonMainMenuTransition.style('position', 'fixed');
    blockStackerWonMainMenuTransition.style('object-fit', 'fill');
    blockStackerWonMainMenuTransition.style('z-index', '1');
    blockStackerWonMainMenuTransition.onended(() => {
            // hide animation
        blockStackerWonMainMenuTransition.hide();
        background(mainMenuImg);
            // display main menu buttons
        wordScrambleButton.show();
        pizzaMatchButton.show();
        blockStackerButton.show();
        audioButton.show();
        creditsButton.show();
            // change state
        currentState = '';
    });
        // block stacker lost main menu transition
    blockStackerLostMainMenuTransition.size(width, height);
    blockStackerLostMainMenuTransition.style('position', 'fixed');
    blockStackerLostMainMenuTransition.style('object-fit', 'fill');
    blockStackerLostMainMenuTransition.style('z-index', '1');
    blockStackerLostMainMenuTransition.onended(() => {
            // hide animation
        blockStackerLostMainMenuTransition.hide();
        background(mainMenuImg);
            // display main menu buttons
        wordScrambleButton.show();
        pizzaMatchButton.show();
        blockStackerButton.show();
        audioButton.show();
        creditsButton.show();
            // change state
        currentState = '';
    });






}


// karan, matthew
function draw() {


    if (playRestaurantAudio) {
        restaurant_audio.loop();
        playRestaurantAudio = false;
    }


    // Handles State
    switch (currentState) {


        // opening
        case 'opening':
            if (!isOpeningAnimationPlaying) { 
                background(openingImg); 
                // outside_audio.play();
            }
            else {
                image(openingAnimation, 0, 0, width, height); 
                if (playDoorOpenAudio) {
                    door_open_audio.play();
                    playDoorOpenAudio = false;
                }
            }
            if (isFading) {
                fadeOpacity += 2;
                if (fadeOpacity >= 255) {
                    fadeOpacity = 255;
                    isFading = false;
                    if (!isFading) { 
                        currentState = 'mainMenu'; 
                        playRestaurantAudio = true;
                        delayUnfadeStartTime = millis();
                    }
                }
            }
            fill(0, fadeOpacity);
            rect(0, 0, width, height);
            break;


        // main menu
        case 'mainMenu':
            if (isDisplayingMainMenu) { background(mainMenuImg); }
            if (millis() - delayUnfadeStartTime >= delayUnfadeDuration) {
                isUnfading = true;
            }
            if (isUnfading && unfadeOpacity > 0) {
                unfadeOpacity -= 5;
                if (unfadeOpacity < 0) unfadeOpacity = 0;
            }
            fill(0, unfadeOpacity);
            rect(0, 0, width, height);
            wordScrambleButton.show();
            pizzaMatchButton.show();
            blockStackerButton.show();
            audioButton.show();
            creditsButton.show();
            break;


        // word scramble
        case 'wordScramble':
            playWordScramble();
            break;


        // pizza match
        case 'pizzaMatch':
            playPizzaMatch();
            break;


        // pizza match
        case 'blockStacker':
            playBlockStacker();
            break;

        
        // default case
        default:
            break;



    }


}




// EVENT LISTENERS ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


// karan
function mousePressed() {


    // opening 
    if (currentState == 'opening' && !isOpeningAnimationPlaying) {
        isOpeningAnimationPlaying = true;
        openingAnimation.play();
        openingAnimation.show();
    }


}



// BUTTONS ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



// sheridan & isabelle
function createMainMenuButtons() {



    // >>>>>>>>>> Word Scramble Button <<<<<<<<<<
    wordScrambleButton = createButton('');
    wordScrambleButton.hide();

    // styling
    wordScrambleButton.position(windowWidth/4.4, windowHeight/3);
    wordScrambleButton.size(windowWidth/5.851, windowWidth/34.13);
    wordScrambleButton.style('opacity', '0');

    // button action
    wordScrambleButton.mousePressed(() =>  {
            // play animation
        wordScrambleAnimation.play();
        wordScrambleAnimation.show();
            // hide main menu buttons
        wordScrambleButton.hide();
        pizzaMatchButton.hide();
        blockStackerButton.hide();
        audioButton.hide();
        creditsButton.hide();
            // change state
        currentState = 'wordScramble';
            // audio
        click_audio.play();
    }); 
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<




    // >>>>>>>>>> Pizza Match Button <<<<<<<<<<
    pizzaMatchButton = createButton('');
    pizzaMatchButton.hide();

    // styling
    pizzaMatchButton.position(windowWidth/4.4, windowHeight/2.55);
    pizzaMatchButton.size(windowWidth/6.826, windowWidth/34.13);
    pizzaMatchButton.style('opacity', '0');

    // button action
    pizzaMatchButton.mousePressed(() =>  {
            // play animation
        pizzaMatchAnimation.play();
        pizzaMatchAnimation.show();
            // hide main menu buttons
        wordScrambleButton.hide();
        pizzaMatchButton.hide();
        blockStackerButton.hide();
        audioButton.hide();
        creditsButton.hide();
            // change state
        currentState = 'pizzaMatch';
            // audio
        click_audio.play();
    }); 
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<




    // >>>>>>>>>> Block Stacker Button <<<<<<<<<<
    blockStackerButton = createButton('');
    blockStackerButton.hide();

    // styling
    blockStackerButton.position(windowWidth/4.4, windowHeight/2.225);
    blockStackerButton.size(windowWidth/6.3, windowWidth/40.96);
    blockStackerButton.style('opacity', '0');

    // button action
    blockStackerButton.mousePressed(() =>  {
            // animation
        blockStackerAnimation.play();
        blockStackerAnimation.show();
            // hide menu buttons
        wordScrambleButton.hide();
        pizzaMatchButton.hide();
        blockStackerButton.hide();
        audioButton.hide();
        creditsButton.hide();
            // change state
        currentState = 'blockStacker';
            // audio
        click_audio.play();
}); 
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<




    // >>>>>>>>>> Audio Button <<<<<<<<<<
    audioButton = createButton('');
    audioButton.hide();

    // styling
    audioButton.position(windowWidth/1.345, windowHeight/2.5);
    audioButton.size(windowWidth/14.12, windowWidth/40.96);
    audioButton.style('opacity', '0');

    // button action
    audioButton.mousePressed(() =>  {
        wordScrambleButton.hide();
        pizzaMatchButton.hide();
        blockStackerButton.hide();
        audioButton.hide();
        creditsButton.hide();
        if (isAudioPlaying) {
            audioOffAnimation.play();
            audioOffAnimation.show();
            setTimeout(fadeOutSound, 1250);
            function fadeOutSound() {
                let duration = 0.75;
                restaurant_audio.amp(0, duration);
            }
        }
        if (!isAudioPlaying) {
            audioOnAnimation.play();
            audioOnAnimation.show();
            setTimeout(fadeInSound, 1250);
            function fadeInSound() {
                let duration = 0.75;
                restaurant_audio.amp(1, duration);
            }
        }
            // audio
        click_audio.play();
    }); 
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<




    // >>>>>>>>>> Credits Button <<<<<<<<<<
    creditsButton = createButton('');
    creditsButton.hide();

    // default styling
    creditsButton.position(windowWidth/1.36, windowHeight/2.225);
    creditsButton.size(windowWidth/11.7, windowWidth/40.96);
    creditsButton.style('opacity', '0');

    // button action
    creditsButton.mousePressed(() =>  {
        creditsButton.hide();
        creditsAnimation.play();
        creditsAnimation.show();
            // audio
        click_audio.play();
    }); 
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<







}



// sheridan & isabelle
function createWordScrambleButtons() {


    // >>>>>>>>>> Back Button <<<<<<<<<<
    wordScrambleBackButton = createButton('');
    wordScrambleBackButton.hide();

    // styling
    wordScrambleBackButton.position(windowWidth / 1.1, windowHeight / 1.9);
    wordScrambleBackButton.size(windowWidth/13, windowWidth/13);
    wordScrambleBackButton.style('opacity', '0');

    // button action
    wordScrambleBackButton.mousePressed(() => {
            // play animation
        wordScrambleAnimationReversed.play();
        wordScrambleAnimationReversed.show();
            // hide game buttons
        wordScrambleBackButton.hide();
        wordScrambleEasyButton.hide();
        wordScrambleMediumButton.hide();
        wordScrambleHardButton.hide();
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<



    // >>>>>>>>>> Easy Button <<<<<<<<<<
    wordScrambleEasyButton = createButton('');
    wordScrambleEasyButton.hide();

    // styling
    wordScrambleEasyButton.position(windowWidth / 4.25, windowHeight / 3.5);
    wordScrambleEasyButton.size(windowWidth/7, windowWidth/6.5);
    wordScrambleEasyButton.style('opacity', '0');
    wordScrambleEasyButton.style('background-color', 'transparent');

    // button action
    wordScrambleEasyButton.mousePressed(() => {
            // play animation
        wordScrambleEasyTransition.play();
        wordScrambleEasyTransition.show();
            // hide game buttons
        wordScrambleEasyButton.hide();
        wordScrambleMediumButton.hide();
        wordScrambleHardButton.hide();
        wordScrambleBackButton.hide();
            // set game difficulty & variables
        wordScrambleDifficulty = 'easy';
        wordScrambleStartTime = millis();
        displayWordScrambleEasyImage = true;
        isWordScrambleWordChosen = false;
        isWordScrambleGameOver = false;
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<


    // >>>>>>>>>> Medium Button <<<<<<<<<<
    wordScrambleMediumButton = createButton('');
    wordScrambleMediumButton.hide();

    // styling
    wordScrambleMediumButton.position(windowWidth / 2.325, windowHeight / 3.5);
    wordScrambleMediumButton.size(windowWidth/7, windowWidth/6.5);
    wordScrambleMediumButton.style('opacity', '0');
    wordScrambleMediumButton.style('background-color', 'transparent');

    // button action
    wordScrambleMediumButton.mousePressed(() => {
            // play animation
        wordScrambleMediumTransition.play();
        wordScrambleMediumTransition.show();
            // hide game buttons
        wordScrambleBackButton.hide();
        wordScrambleEasyButton.hide();
        wordScrambleMediumButton.hide();
        wordScrambleHardButton.hide();
            // set game difficulty & variables
        wordScrambleDifficulty = 'medium';
        wordScrambleStartTime = millis();
        displayWordScrambleMediumImage = true;
        isWordScrambleWordChosen = false;
        isWordScrambleGameOver = false;
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<


    // >>>>>>>>>> Hard Button <<<<<<<<<<
    wordScrambleHardButton = createButton('');
    wordScrambleHardButton.hide();

    // styling
    wordScrambleHardButton.position(windowWidth / 1.6, windowHeight / 3.5);
    wordScrambleHardButton.size(windowWidth/7, windowWidth/6.5);
    wordScrambleHardButton.style('opacity', '0');
    wordScrambleHardButton.style('background-color', 'transparent');

    // button action
    wordScrambleHardButton.mousePressed(() => {
            // play animation
        wordScrambleHardTransition.play();
        wordScrambleHardTransition.show();
            // hide game buttons
        wordScrambleBackButton.hide();
        wordScrambleEasyButton.hide();
        wordScrambleMediumButton.hide();
        wordScrambleHardButton.hide();
            // set game difficulty & variables
        wordScrambleDifficulty = 'hard';
        wordScrambleStartTime = millis();
        displayWordScrambleHardImage = true;
        isWordScrambleWordChosen = false;
        isWordScrambleGameOver = false;
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<


    // >>>>>>>>>> Quit Button <<<<<<<<<<
    wordScrambleQuitButton = createButton('');
    wordScrambleQuitButton.hide();

    // styling
    wordScrambleQuitButton.position(windowWidth / 1.6, windowHeight / 3.5);
    wordScrambleQuitButton.size(windowWidth/7, windowWidth/6.5);
    wordScrambleQuitButton.style('opacity', '0');
    wordScrambleQuitButton.style('background-color', 'transparent');

    // button action
    wordScrambleQuitButton.mousePressed(() => {
            // play animation
        wordScrambleMainMenuTransition.play();
        wordScrambleMainMenuTransition.show();
            // hide end screen buttons
        wordScramblePlayAgainButton.hide();
        wordScrambleQuitButton.hide();
            // audio
        click_audio.play();
        
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<



    // >>>>>>>>>> Play Again Button <<<<<<<<<<
    wordScramblePlayAgainButton = createButton('');
    wordScramblePlayAgainButton.hide();

    // styling
    wordScramblePlayAgainButton.position(windowWidth / 4.25, windowHeight / 3.5);
    wordScramblePlayAgainButton.size(windowWidth/7, windowWidth/6.5);
    wordScramblePlayAgainButton.style('opacity', '0');
    wordScramblePlayAgainButton.style('background-color', 'transparent');

    // button action
    wordScramblePlayAgainButton.mousePressed(() => {
            // hide end screen buttons
        wordScramblePlayAgainButton.hide();
        wordScrambleQuitButton.hide();
        
        if (isWordScrambleWon) {
            wordScrambleWonPlayAgainTransition.play();
            wordScrambleWonPlayAgainTransition.show();
        } else {
            wordScrambleLostPlayAgainTransition.play();
            wordScrambleLostPlayAgainTransition.show();
        }
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<

    
}



// karan
function createPizzaMatchButtons() {




    // >>>>>>>>>> Back Button <<<<<<<<<<
    pizzaMatchBackButton = createButton('');
    pizzaMatchBackButton.hide();

    // styling
    pizzaMatchBackButton.position(windowWidth / 1.65, windowHeight / 1.9);
    pizzaMatchBackButton.size(windowWidth/13.653, windowWidth/40.96);
    pizzaMatchBackButton.style('opacity', '0');
    pizzaMatchBackButton.style('background-color', 'transparent');

    // button action
    pizzaMatchBackButton.mousePressed(() => {
            // play animation
        pizzaMatchAnimationReversed.play();
        pizzaMatchAnimationReversed.show();
            // hide game buttons
        pizzaMatchBackButton.hide();
        pizzaMatchEasyButton.hide();
        pizzaMatchMediumButton.hide();
        pizzaMatchHardButton.hide();
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<




    // >>>>>>>>>> Easy Button <<<<<<<<<<
    pizzaMatchEasyButton = createButton('');
    pizzaMatchEasyButton.hide();

    // styling
    pizzaMatchEasyButton.position(windowWidth / 2.4, windowHeight / 2.175);
    pizzaMatchEasyButton.size(windowWidth/15.17, windowWidth/40.96);
    pizzaMatchEasyButton.style('opacity', '0');
    pizzaMatchEasyButton.style('background-color', 'transparent');

    // button action
    pizzaMatchEasyButton.mousePressed(() => {
            // play animation
        pizzaMatchJournalTransition.play();
        pizzaMatchJournalTransition.show();
            // hide game buttons
        pizzaMatchBackButton.hide();
        pizzaMatchEasyButton.hide();
        pizzaMatchMediumButton.hide();
        pizzaMatchHardButton.hide();
            // set game difficulty & variables
        pizzaMatchDifficulty = 'easy'
        pizzaMatchStartTime = millis();
        hasPizzaMatchCardsTransitionPlayed = false;
        isPizzaMatchRandomIngredientsChosen = false;
        pizzaMatchTargetIngredients = [];
        pizzaMatchSelectedCards = [];
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<




    // >>>>>>>>>> Medium Button <<<<<<<<<<
    pizzaMatchMediumButton = createButton('');
    pizzaMatchMediumButton.hide();

    // styling
    pizzaMatchMediumButton.position(windowWidth / 2.6, windowHeight / 1.875);
    pizzaMatchMediumButton.size(windowWidth/8.192, windowWidth/34.13);
    pizzaMatchMediumButton.style('opacity', '0');
    pizzaMatchMediumButton.style('background-color', 'transparent');

    // button action
    pizzaMatchMediumButton.mousePressed(() => {
            // play animation
        pizzaMatchJournalTransition.play();
        pizzaMatchJournalTransition.show();
            // hide game buttons
        pizzaMatchBackButton.hide();
        pizzaMatchEasyButton.hide();
        pizzaMatchMediumButton.hide();
        pizzaMatchHardButton.hide();
            // set game difficulty & variables
        pizzaMatchDifficulty = 'medium'
        pizzaMatchStartTime = millis();
        hasPizzaMatchCardsTransitionPlayed = false;
        isPizzaMatchRandomIngredientsChosen = false;
        pizzaMatchTargetIngredients = [];
        pizzaMatchSelectedCards = [];
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<




    // >>>>>>>>>> Hard Button <<<<<<<<<<
    pizzaMatchHardButton = createButton('');
    pizzaMatchHardButton.hide();

    // styling
    pizzaMatchHardButton.position(windowWidth / 2.4, windowHeight / 1.65);
    pizzaMatchHardButton.size(windowWidth/14.63, windowWidth/34.13);
    pizzaMatchHardButton.style('opacity', '0');
    pizzaMatchHardButton.style('background-color', 'transparent');

    // button action
    pizzaMatchHardButton.mousePressed(() => {
            // play animation
        pizzaMatchJournalTransition.play();
        pizzaMatchJournalTransition.show();
            // hide game buttons
        pizzaMatchBackButton.hide();
        pizzaMatchEasyButton.hide();
        pizzaMatchMediumButton.hide();
        pizzaMatchHardButton.hide();
            // set game difficulty & variables
        pizzaMatchDifficulty = 'hard'
        pizzaMatchStartTime = millis();
        hasPizzaMatchCardsTransitionPlayed = false;
        isPizzaMatchRandomIngredientsChosen = false;
        pizzaMatchTargetIngredients = [];
        pizzaMatchSelectedCards = [];
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<




    // >>>>>>>>>> Quit Button <<<<<<<<<<
    pizzaMatchQuitButton = createButton('');
    pizzaMatchQuitButton.hide();

    // styling
    pizzaMatchQuitButton.position(windowWidth / 2.05, windowHeight / 1.65);
    pizzaMatchQuitButton.size(windowWidth/10.778, windowWidth/31.5);
    pizzaMatchQuitButton.style('opacity', '0');

    // button action
    pizzaMatchQuitButton.mousePressed(() => {
            // hide end screen buttons
        pizzaMatchQuitButton.hide();
        pizzaMatchPlayAgainButton.hide();
            // play animation
        if (pizzaMatchCorrectlyMatched) {
            pizzaMatchCorrectMatchMainMenuTransition.play();
            pizzaMatchCorrectMatchMainMenuTransition.show();
        } else {
            pizzaMatchIncorrectMatchMainMenuTransition.play();
            pizzaMatchIncorrectMatchMainMenuTransition.show();
        }
            // audio
        click_audio.play();
        
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<




    // >>>>>>>>>> Cook Pizza Button <<<<<<<<<<
    // Code inspired by ChatGPT -- https://chat.openai.com/ -- [CSS Styling for Button]
    cookPizzaButton = createButton('Cook Pizza');
    cookPizzaButton.hide();

    // styling
    cookPizzaButton.position(windowWidth / 6, windowHeight / 2.2); // Positioned near the Play Again button
    cookPizzaButton.size(windowWidth/6.826, windowWidth/27.3);
    cookPizzaButton.style('background-image', 'url("assets/wood_button_texture.png")');
    cookPizzaButton.style('background-size', 'cover'); // Ensures the texture covers the button
    cookPizzaButton.style('border', '3px solid #1E140B'); // Darker brown border
    cookPizzaButton.style('color', '#F9E4B7'); // Warm cream text color
    cookPizzaButton.style('font-size', '18px'); // Same size text as other buttons
    cookPizzaButton.style('font-family', 'serif'); // Elegant serif font
    cookPizzaButton.style('text-shadow', '2px 2px 4px rgba(0, 0, 0, 0.5)'); // Slight shadow for text depth
    cookPizzaButton.style('border-radius', '15px'); // Rounded corners for a softer feel
    cookPizzaButton.style('box-shadow', '8px 8px 20px rgba(0, 0, 0, 0.8)'); // Enhanced shadow
    cookPizzaButton.style('z-index', '5'); // Ensures the button stays above other elements
    cookPizzaButton.style('transition', 'all 0.3s ease-in-out');

    // hover effect
    cookPizzaButton.mouseOver(() => {
        cookPizzaButton.style('transform', 'scale(1.05)'); // Slight zoom effect
        cookPizzaButton.style('box-shadow', '11px 11px 25px rgba(0, 0, 0, 1.2)'); // Stronger shadow on hover
        cookPizzaButton.style('cursor', 'pointer');
    });
    cookPizzaButton.mouseOut(() => {
        cookPizzaButton.style('transform', 'scale(1)'); // Revert to original size
        cookPizzaButton.style('box-shadow', '8px 8px 20px rgba(0, 0, 0, 0.8)'); // Original shadow
        cookPizzaButton.style('opacity', '1'); // Revert to full opacity
    });

    // button action
    cookPizzaButton.mousePressed(() => {
            // hide button
        cookPizzaButton.hide();
            // confirm match accuracy & set game state
        pizzaMatchCorrectlyMatched = checkIngredientMatches();
        isPizzaMatchGameOver = true;
            // hide ingredient buttons
        pizzaMatchBasilButton.hide();
        pizzaMatchBroccoliButton.hide();
        pizzaMatchCheeseButton.hide();
        pizzaMatchJalapenosButton.hide();
        pizzaMatchMushroomsButton.hide();
        pizzaMatchOlivesButton.hide();
        pizzaMatchOnionsButton.hide();
        pizzaMatchPepperoniButton.hide();
        pizzaMatchPineappleButton.hide();
        pizzaMatchPorkButton.hide();
        pizzaMatchSpinachButton.hide();
        pizzaMatchTomatoButton.hide();
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<




    // >>>>>>>>>> Play Again Button <<<<<<<<<<
    pizzaMatchPlayAgainButton = createButton('');
    pizzaMatchPlayAgainButton.hide();

    // styling
    pizzaMatchPlayAgainButton.position(windowWidth / 2.35, windowHeight / 2.05);
    pizzaMatchPlayAgainButton.size(windowWidth/4.55, windowWidth/27.30);
    pizzaMatchPlayAgainButton.style('opacity', '0');

    // button action
    pizzaMatchPlayAgainButton.mousePressed(() => {
            // hide end screen buttons
        pizzaMatchQuitButton.hide();
        pizzaMatchPlayAgainButton.hide();
            // play animation
        if (pizzaMatchCorrectlyMatched) {
            pizzaMatchCorrectMatchPlayAgainTransition.play();
            pizzaMatchCorrectMatchPlayAgainTransition.show();
        } else {
            pizzaMatchIncorrectMatchPlayAgainTransition.play();
            pizzaMatchIncorrectMatchPlayAgainTransition.show();
        }
            // audio
        click_audio.play();
        
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<







    // >>>>>>>>>> Basil Button <<<<<<<<<<
    pizzaMatchBasilButton = createButton('');
    pizzaMatchBasilButton.hide();
    pizzaMatchBasilButton.position(windowWidth / 2.71, windowHeight / 3.71);
    pizzaMatchBasilButton.size(windowWidth/14.628, windowWidth/14.5);
    pizzaMatchBasilButton.style('background-color', 'transparent');
    pizzaMatchBasilButton.style('opacity', '1');
    pizzaMatchBasilButton.mouseOver(() => { pizzaMatchBasilButton.style('background-color', 'rgba(128, 128, 128, 0.5)'); }); // Light gray shade
    pizzaMatchBasilButton.mouseOut(() => { pizzaMatchBasilButton.style('background-color', 'transparent'); }); // Reset to transparent
    pizzaMatchBasilButton.mousePressed(() => {
        if (!pizzaMatchSelectedCards.includes(pizzaMatchIngredients[0])) {
            pizzaMatchSelectedCards.push(pizzaMatchIngredients[0]);
        } else {
            pizzaMatchSelectedCards = pizzaMatchSelectedCards.filter(ing => ing !== pizzaMatchIngredients[0]);
        }
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<
    // >>>>>>>>>> Broccoli Button <<<<<<<<<<
    pizzaMatchBroccoliButton = createButton('');
    pizzaMatchBroccoliButton.hide();
    pizzaMatchBroccoliButton.position(windowWidth / 2.25, windowHeight / 3.71);
    pizzaMatchBroccoliButton.size(windowWidth/14.628, windowWidth/14.5);
    pizzaMatchBroccoliButton.style('background-color', 'transparent');
    pizzaMatchBroccoliButton.style('opacity', '1');   
    pizzaMatchBroccoliButton.mouseOver(() => { pizzaMatchBroccoliButton.style('background-color', 'rgba(128, 128, 128, 0.5)'); }); // Light gray shade
    pizzaMatchBroccoliButton.mouseOut(() => { pizzaMatchBroccoliButton.style('background-color', 'transparent'); }); // Reset to transparent
    pizzaMatchBroccoliButton.mousePressed(() => {
        if (!pizzaMatchSelectedCards.includes(pizzaMatchIngredients[1])) {
            pizzaMatchSelectedCards.push(pizzaMatchIngredients[1]);
        } else {
            pizzaMatchSelectedCards = pizzaMatchSelectedCards.filter(ing => ing !== pizzaMatchIngredients[1]);
        }
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<
    // >>>>>>>>>> Cheese Button <<<<<<<<<<
    pizzaMatchCheeseButton = createButton('');
    pizzaMatchCheeseButton.hide();
    pizzaMatchCheeseButton.position(windowWidth / 1.925, windowHeight / 3.71);
    pizzaMatchCheeseButton.size(windowWidth/14.628, windowWidth/14.5);
    pizzaMatchCheeseButton.style('background-color', 'transparent');
    pizzaMatchCheeseButton.style('opacity', '1');   
    pizzaMatchCheeseButton.mouseOver(() => { pizzaMatchCheeseButton.style('background-color', 'rgba(128, 128, 128, 0.5)'); }); // Light gray shade
    pizzaMatchCheeseButton.mouseOut(() => { pizzaMatchCheeseButton.style('background-color', 'transparent'); }); // Reset to transparent
    pizzaMatchCheeseButton.mousePressed(() => {
        if (!pizzaMatchSelectedCards.includes(pizzaMatchIngredients[2])) {
            pizzaMatchSelectedCards.push(pizzaMatchIngredients[2]);
        } else {
            pizzaMatchSelectedCards = pizzaMatchSelectedCards.filter(ing => ing !== pizzaMatchIngredients[2]);
        }
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<
    // >>>>>>>>>> Jalapenos Button <<<<<<<<<<
    pizzaMatchJalapenosButton = createButton('');
    pizzaMatchJalapenosButton.hide();
    pizzaMatchJalapenosButton.position(windowWidth / 1.685, windowHeight / 3.71);
    pizzaMatchJalapenosButton.size(windowWidth/14.628, windowWidth/14.5);
    pizzaMatchJalapenosButton.style('background-color', 'transparent');
    pizzaMatchJalapenosButton.style('opacity', '1');  
    pizzaMatchJalapenosButton.mouseOver(() => { pizzaMatchJalapenosButton.style('background-color', 'rgba(128, 128, 128, 0.5)'); }); // Light gray shade
    pizzaMatchJalapenosButton.mouseOut(() => { pizzaMatchJalapenosButton.style('background-color', 'transparent'); }); // Reset to transparent 
    pizzaMatchJalapenosButton.mousePressed(() => { 
        if (!pizzaMatchSelectedCards.includes(pizzaMatchIngredients[3])) {
            pizzaMatchSelectedCards.push(pizzaMatchIngredients[3]);
        } else {
            pizzaMatchSelectedCards = pizzaMatchSelectedCards.filter(ing => ing !== pizzaMatchIngredients[3]);
        }
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<
    // >>>>>>>>>> Mushrooms Button <<<<<<<<<<
    pizzaMatchMushroomsButton = createButton('');
    pizzaMatchMushroomsButton.hide();
    pizzaMatchMushroomsButton.position(windowWidth / 2.7, windowHeight / 2.35);
    pizzaMatchMushroomsButton.size(windowWidth/14.628, windowWidth/14.5);
    pizzaMatchMushroomsButton.style('background-color', 'transparent');
    pizzaMatchMushroomsButton.style('opacity', '1');   
    pizzaMatchMushroomsButton.mouseOver(() => { pizzaMatchMushroomsButton.style('background-color', 'rgba(128, 128, 128, 0.5)'); }); // Light gray shade
    pizzaMatchMushroomsButton.mouseOut(() => { pizzaMatchMushroomsButton.style('background-color', 'transparent'); }); // Reset to transparent 
    pizzaMatchMushroomsButton.mousePressed(() => { 
        if (!pizzaMatchSelectedCards.includes(pizzaMatchIngredients[4])) {
            pizzaMatchSelectedCards.push(pizzaMatchIngredients[4]);
        } else {
            pizzaMatchSelectedCards = pizzaMatchSelectedCards.filter(ing => ing !== pizzaMatchIngredients[4]);
        }
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<
    // >>>>>>>>>> Olives Button <<<<<<<<<<
    pizzaMatchOlivesButton = createButton('');
    pizzaMatchOlivesButton.hide();
    pizzaMatchOlivesButton.position(windowWidth / 2.245, windowHeight / 2.35);
    pizzaMatchOlivesButton.size(windowWidth/14.628, windowWidth/14.5);
    pizzaMatchOlivesButton.style('background-color', 'transparent');
    pizzaMatchOlivesButton.style('opacity', '1'); 
    pizzaMatchOlivesButton.mouseOver(() => { pizzaMatchOlivesButton.style('background-color', 'rgba(128, 128, 128, 0.5)'); }); // Light gray shade
    pizzaMatchOlivesButton.mouseOut(() => { pizzaMatchOlivesButton.style('background-color', 'transparent'); }); // Reset to transparent   
    pizzaMatchOlivesButton.mousePressed(() => { 
        if (!pizzaMatchSelectedCards.includes(pizzaMatchIngredients[5])) {
            pizzaMatchSelectedCards.push(pizzaMatchIngredients[5]);
        } else {
            pizzaMatchSelectedCards = pizzaMatchSelectedCards.filter(ing => ing !== pizzaMatchIngredients[5]);
        }
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<
    // >>>>>>>>>> Onions Button <<<<<<<<<<
    pizzaMatchOnionsButton = createButton('');
    pizzaMatchOnionsButton.hide();
    pizzaMatchOnionsButton.position(windowWidth / 1.9225, windowHeight / 2.35);
    pizzaMatchOnionsButton.size(windowWidth/14.628, windowWidth/14.5);
    pizzaMatchOnionsButton.style('background-color', 'transparent');
    pizzaMatchOnionsButton.style('opacity', '1');
    pizzaMatchOnionsButton.mouseOver(() => { pizzaMatchOnionsButton.style('background-color', 'rgba(128, 128, 128, 0.5)'); }); // Light gray shade
    pizzaMatchOnionsButton.mouseOut(() => { pizzaMatchOnionsButton.style('background-color', 'transparent'); }); // Reset to transparent      
    pizzaMatchOnionsButton.mousePressed(() => { 
        if (!pizzaMatchSelectedCards.includes(pizzaMatchIngredients[6])) {
            pizzaMatchSelectedCards.push(pizzaMatchIngredients[6]);
        } else {
            pizzaMatchSelectedCards = pizzaMatchSelectedCards.filter(ing => ing !== pizzaMatchIngredients[6]);
        }
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<
    // >>>>>>>>>> Pepperoni Button <<<<<<<<<<
    pizzaMatchPepperoniButton = createButton('');
    pizzaMatchPepperoniButton.hide();
    pizzaMatchPepperoniButton.position(windowWidth / 1.6825, windowHeight / 2.35);
    pizzaMatchPepperoniButton.size(windowWidth/14.628, windowWidth/14.5);
    pizzaMatchPepperoniButton.style('background-color', 'transparent');
    pizzaMatchPepperoniButton.style('opacity', '1');   
    pizzaMatchPepperoniButton.mouseOver(() => { pizzaMatchPepperoniButton.style('background-color', 'rgba(128, 128, 128, 0.5)'); }); // Light gray shade
    pizzaMatchPepperoniButton.mouseOut(() => { pizzaMatchPepperoniButton.style('background-color', 'transparent'); }); // Reset to transparent      
    pizzaMatchPepperoniButton.mousePressed(() => { 
        if (!pizzaMatchSelectedCards.includes(pizzaMatchIngredients[7])) {
            pizzaMatchSelectedCards.push(pizzaMatchIngredients[7]);
        } else {
            pizzaMatchSelectedCards = pizzaMatchSelectedCards.filter(ing => ing !== pizzaMatchIngredients[7]);
        }
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<
    // >>>>>>>>>> Pineapple Button <<<<<<<<<<
    pizzaMatchPineappleButton = createButton('');
    pizzaMatchPineappleButton.hide();
    pizzaMatchPineappleButton.position(windowWidth / 2.71, windowHeight / 1.75);
    pizzaMatchPineappleButton.size(windowWidth/14.628, windowWidth/14.5);
    pizzaMatchPineappleButton.style('background-color', 'transparent');
    pizzaMatchPineappleButton.style('opacity', '1');  
    pizzaMatchPineappleButton.mouseOver(() => { pizzaMatchPineappleButton.style('background-color', 'rgba(128, 128, 128, 0.5)'); }); // Light gray shade
    pizzaMatchPineappleButton.mouseOut(() => { pizzaMatchPineappleButton.style('background-color', 'transparent'); }); // Reset to transparent       
    pizzaMatchPineappleButton.mousePressed(() => { 
        if (!pizzaMatchSelectedCards.includes(pizzaMatchIngredients[8])) {
            pizzaMatchSelectedCards.push(pizzaMatchIngredients[8]);
        } else {
            pizzaMatchSelectedCards = pizzaMatchSelectedCards.filter(ing => ing !== pizzaMatchIngredients[8]);
        }
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<
    // >>>>>>>>>> Pork Button <<<<<<<<<<
    pizzaMatchPorkButton = createButton('');
    pizzaMatchPorkButton.hide();
    pizzaMatchPorkButton.position(windowWidth / 2.2525, windowHeight / 1.75);
    pizzaMatchPorkButton.size(windowWidth/14.628, windowWidth/14.5);
    pizzaMatchPorkButton.style('background-color', 'transparent');
    pizzaMatchPorkButton.style('opacity', '1'); 
    pizzaMatchPorkButton.mouseOver(() => { pizzaMatchPorkButton.style('background-color', 'rgba(128, 128, 128, 0.5)'); }); // Light gray shade
    pizzaMatchPorkButton.mouseOut(() => { pizzaMatchPorkButton.style('background-color', 'transparent'); }); // Reset to transparent         
    pizzaMatchPorkButton.mousePressed(() => { 
        if (!pizzaMatchSelectedCards.includes(pizzaMatchIngredients[9])) {
            pizzaMatchSelectedCards.push(pizzaMatchIngredients[9]);
        } else {
            pizzaMatchSelectedCards = pizzaMatchSelectedCards.filter(ing => ing !== pizzaMatchIngredients[9]);
        }
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<
    // >>>>>>>>>> Spinach Button <<<<<<<<<<
    pizzaMatchSpinachButton = createButton('');
    pizzaMatchSpinachButton.hide();
    pizzaMatchSpinachButton.position(windowWidth / 1.926, windowHeight / 1.75);
    pizzaMatchSpinachButton.size(windowWidth/14.628, windowWidth/14.5);
    pizzaMatchSpinachButton.style('background-color', 'transparent');
    pizzaMatchSpinachButton.style('opacity', '1');   
    pizzaMatchSpinachButton.mouseOver(() => { pizzaMatchSpinachButton.style('background-color', 'rgba(128, 128, 128, 0.5)'); }); // Light gray shade
    pizzaMatchSpinachButton.mouseOut(() => { pizzaMatchSpinachButton.style('background-color', 'transparent'); }); // Reset to transparent         
    pizzaMatchSpinachButton.mousePressed(() => { 
        if (!pizzaMatchSelectedCards.includes(pizzaMatchIngredients[10])) {
            pizzaMatchSelectedCards.push(pizzaMatchIngredients[10]);
        } else {
            pizzaMatchSelectedCards = pizzaMatchSelectedCards.filter(ing => ing !== pizzaMatchIngredients[10]);
        }
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<
    // >>>>>>>>>> Tomato Button <<<<<<<<<<
    pizzaMatchTomatoButton = createButton('');
    pizzaMatchTomatoButton.hide();
    pizzaMatchTomatoButton.position(windowWidth / 1.685, windowHeight / 1.75);
    pizzaMatchTomatoButton.size(windowWidth/14.628, windowWidth/14.5);
    pizzaMatchTomatoButton.style('background-color', 'transparent');
    pizzaMatchTomatoButton.style('opacity', '1');   
    pizzaMatchTomatoButton.mouseOver(() => { pizzaMatchTomatoButton.style('background-color', 'rgba(128, 128, 128, 0.5)'); }); // Light gray shade
    pizzaMatchTomatoButton.mouseOut(() => { pizzaMatchTomatoButton.style('background-color', 'transparent'); }); // Reset to transparent         
    pizzaMatchTomatoButton.mousePressed(() => { 
        if (!pizzaMatchSelectedCards.includes(pizzaMatchIngredients[11])) {
            pizzaMatchSelectedCards.push(pizzaMatchIngredients[11]);
        } else {
            pizzaMatchSelectedCards = pizzaMatchSelectedCards.filter(ing => ing !== pizzaMatchIngredients[11]);
        }
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<

}



// matthew
function createBlockStackerButtons() {




    // >>>>>>>>>> Back Button <<<<<<<<<<
    blockStackerBackButton = createButton('');
    blockStackerBackButton.hide();

    // styling
    blockStackerBackButton.position(windowWidth / 2.15, windowHeight / 4.2);
    blockStackerBackButton.size(windowWidth/11, windowWidth/25);
    blockStackerBackButton.style('opacity', '0');
    blockStackerBackButton.style('background-color', 'transparent');

    // button action
    blockStackerBackButton.mousePressed(() => {
            // play animation
        blockStackerAnimationReversed.play();
        blockStackerAnimationReversed.show();
            // hide game buttons
        blockStackerBackButton.hide();
        blockStackerEasyButton.hide();
        blockStackerMediumButton.hide();
        blockStackerHardButton.hide();
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<


    // >>>>>>>>>> Easy Button <<<<<<<<<<
    blockStackerEasyButton = createButton('');
    blockStackerEasyButton.hide();

    // styling
    blockStackerEasyButton.position(windowWidth / 5, windowHeight / 1.925);
    blockStackerEasyButton.size(windowWidth/9, windowWidth/23);
    blockStackerEasyButton.style('opacity', '0');
    blockStackerEasyButton.style('background-color', 'transparent');

    // button action
    blockStackerEasyButton.mousePressed(() => {
            // play animation
        blockStackerGameTransition.play();
        blockStackerGameTransition.show();
            // hide game buttons
        blockStackerBackButton.hide();
        blockStackerEasyButton.hide();
        blockStackerMediumButton.hide();
        blockStackerHardButton.hide();
            // change game difficulty
        blockStackerDifficulty = 'easy';
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<


    // >>>>>>>>>> Medium Button <<<<<<<<<<
    blockStackerMediumButton = createButton('');
    blockStackerMediumButton.hide();

    // styling
    blockStackerMediumButton.position(windowWidth / 2.4, windowHeight / 1.925);
    blockStackerMediumButton.size(windowWidth/5.5, windowWidth/23);
    blockStackerMediumButton.style('opacity', '0');
    blockStackerMediumButton.style('background-color', 'transparent');

    // button action
    blockStackerMediumButton.mousePressed(() => {
            // play animation
        blockStackerGameTransition.play();
        blockStackerGameTransition.show();
            // hide game buttons
        blockStackerBackButton.hide();
        blockStackerEasyButton.hide();
        blockStackerMediumButton.hide();
        blockStackerHardButton.hide();
            // change game difficulty
        blockStackerDifficulty = 'medium';
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<


    // >>>>>>>>>> Hard Button <<<<<<<<<<
    blockStackerHardButton = createButton('');
    blockStackerHardButton.hide();

    // styling
    blockStackerHardButton.position(windowWidth / 1.4, windowHeight / 1.925);
    blockStackerHardButton.size(windowWidth/9, windowWidth/23);
    blockStackerHardButton.style('opacity', '0');
    blockStackerHardButton.style('background-color', 'transparent');

    // button action
    blockStackerHardButton.mousePressed(() => {
            // play animation
        blockStackerGameTransition.play();
        blockStackerGameTransition.show();
            // hide game buttons
        blockStackerBackButton.hide();
        blockStackerEasyButton.hide();
        blockStackerMediumButton.hide();
        blockStackerHardButton.hide();
            // change game difficulty
        blockStackerDifficulty = 'hard';
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<


    // >>>>>>>>>> Quit Button <<<<<<<<<<
    blockStackerQuitButton = createButton('');
    blockStackerQuitButton.hide();

    // styling
    blockStackerQuitButton.position(windowWidth / 1.38, windowHeight / 1.925);
    blockStackerQuitButton.size(windowWidth/9, windowWidth/23);
    blockStackerQuitButton.style('opacity', '0');
    blockStackerQuitButton.style('background-color', 'transparent');

    // button action
    blockStackerQuitButton.mousePressed(() => {
            // hide end screen buttons
        blockStackerPlayAgainButton.hide();
        blockStackerQuitButton.hide();
            // play animations
        if (isBlockStackerWon) {
            blockStackerWonMainMenuTransition.play();
            blockStackerWonMainMenuTransition.show();
        } else {
            blockStackerLostMainMenuTransition.play();
            blockStackerLostMainMenuTransition.show();
        } 
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<




    // >>>>>>>>>> Play Again Button <<<<<<<<<<
    blockStackerPlayAgainButton = createButton('');
    blockStackerPlayAgainButton.hide();

    // styling
    blockStackerPlayAgainButton.position(windowWidth / 6, windowHeight / 1.925);
    blockStackerPlayAgainButton.size(windowWidth/4, windowWidth/23);
    blockStackerPlayAgainButton.style('opacity', '0');
    blockStackerPlayAgainButton.style('background-color', 'transparent');

    // button action
    blockStackerPlayAgainButton.mousePressed(() => {
            // hide end screen buttons
        blockStackerPlayAgainButton.hide();
        blockStackerQuitButton.hide();
            // play animations
        if (isBlockStackerWon) {
            blockStackerWonPlayAgainTransition.play();
            blockStackerWonPlayAgainTransition.show();
        } else {
            blockStackerLostPlayAgainTransition.play();
            blockStackerLostPlayAgainTransition.show();
        } 
            // audio
        click_audio.play();
    });
    // >>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<



}



// karan
// Code inspired by ChatGPT -- https://chat.openai.com/ -- [CSS Styling for Button]
function createCreditsButtons() {




    // >>>>>>>>>> Back Button <<<<<<<<<<
    creditsBackButton = createButton('Back');
    creditsBackButton.hide();

    // styling
    creditsBackButton.position(windowWidth / 75, windowHeight / 1.1);
    creditsBackButton.size(windowWidth/8.192, windowWidth/27.30);
    creditsBackButton.style('background-image', 'url("assets/wood_button_texture.png")'); 
    creditsBackButton.style('background-size', 'cover'); // Ensures the texture covers the button
    creditsBackButton.style('border', '3px solid #1E140B'); // Darker brown border
    creditsBackButton.style('color', '#F9E4B7'); // Warm cream text color
    creditsBackButton.style('font-size', '16px'); // Slightly larger text
    creditsBackButton.style('font-family', 'serif'); // Elegant serif font for a polished look
    creditsBackButton.style('text-shadow', '2px 2px 4px rgba(0, 0, 0, 0.5)'); // Slight shadow for text depth
    creditsBackButton.style('border-radius', '15px'); // Slightly more rounded corners for a softer feel
    creditsBackButton.style('box-shadow', '6px 6px 15px rgba(0, 0, 0, 0.5)'); // Enhanced shadow for a polished look
    creditsBackButton.style('z-index', '5'); // Ensures the button stays above other elements
    creditsBackButton.style('transition', 'all 0.3s ease-in-out');

    // hover effect
    creditsBackButton.mouseOver(() => {
        creditsBackButton.style('transform', 'scale(1.05)'); // Slight zoom effect
        creditsBackButton.style('box-shadow', '8px 8px 20px rgba(0, 0, 0, 0.6)'); // Stronger shadow on hover
        creditsBackButton.style('cursor', 'pointer');
    });
    creditsBackButton.mouseOut(() => {
        creditsBackButton.style('transform', 'scale(1)'); // Revert to original size
        creditsBackButton.style('box-shadow', '6px 6px 15px rgba(0, 0, 0, 0.5)'); // Original shadow
        creditsBackButton.style('opacity', '1'); // Revert to full opacity
    });

    // button action
    creditsBackButton.mousePressed(() => {
        creditsAnimation.hide();
        creditsAnimationReversed.play();
        creditsAnimationReversed.show();
        creditsBackButton.hide();
            // audio
        click_audio.play();
    });




}




// GAME STATES ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





// karan
function playPizzaMatch() {
  
      
    // timer
    // Code inspired by ChatGPT -- https://chat.openai.com/ -- [Setting up a Timer in p5.js]
    pizzaMatchElapsedTime = (millis() - pizzaMatchStartTime) / 1000; // Convert milliseconds to seconds
    pizzaMatchRemainingTime = ceil(max(0, pizzaMatchMemorizationTime - pizzaMatchElapsedTime));
    
    
    // setup
    switch (pizzaMatchDifficulty) {
      case 'easy':
        pizzaMatchMemorizationTime = 9;
        setupPizzaMatch();
        break;
      case 'medium':
        pizzaMatchMemorizationTime = 7;
        setupPizzaMatch();
        break;
      case 'hard':
        pizzaMatchMemorizationTime = 5;
        setupPizzaMatch();
        break;
      default:
        break;
    }
  
  
}

// karan
function setupPizzaMatch() {


    // backgrounds
    if (displayPizzaMatchJournalImage) { background(pizzaMatchJournalImage); }
    if (displayPizzaMatchCardsImage) { background(pizzaMatchCardsImage); }
    
    
    // select 5 random ingredients
    // Code inspired by ChatGPT -- https://chat.openai.com/ -- [Checking and Pushing Elements of an Array]
    if (!isPizzaMatchRandomIngredientsChosen) {
      while (pizzaMatchTargetIngredients.length < 5) {
        let ingredient = random(pizzaMatchIngredients);
        if (!pizzaMatchTargetIngredients.includes(ingredient)) {
          pizzaMatchTargetIngredients.push(ingredient);
        }
        isPizzaMatchRandomIngredientsChosen = true;
      }
    }


    // text styling
    textSize(windowHeight/30.294);
    textFont('Courier New');
    textStyle(BOLD);
    fill(0);
  
    
    // display required ingredients
    if (pizzaMatchRemainingTime > 0 && !isPizzaMatchGameOver) {
      text('Memorize This Order\n\n'
          + '* ' + pizzaMatchTargetIngredients[0] + '\n'
          + '* ' + pizzaMatchTargetIngredients[1] + '\n'
          + '* ' + pizzaMatchTargetIngredients[2] + '\n'
          + '* ' + pizzaMatchTargetIngredients[3] + '\n'
          + '* ' + pizzaMatchTargetIngredients[4] + '\n\n'
          + 'You have '+ pizzaMatchRemainingTime + ' seconds.'
           , windowWidth/2.45, windowHeight/2.9);
    }
    if (pizzaMatchRemainingTime == 0 & !hasPizzaMatchCardsTransitionPlayed) {
        pizzaMatchCardsTransition.play();
        pizzaMatchCardsTransition.show();
        displayPizzaMatchJournalImage = false;
        displayPizzaMatchCardsImage = true;
        hasPizzaMatchCardsTransitionPlayed = true;
    }
  
    
  
    // display cards
    if (pizzaMatchRemainingTime <= 0 && !isPizzaMatchGameOver) {

        // reset selected cards
        if (!isPizzaMatchSelectedCardsReset) {
            pizzaMatchSelectedCards = [];
            isPizzaMatchSelectedCardsReset = true;
        }

        // tint selected cards
        if (pizzaMatchSelectedCards.includes(pizzaMatchIngredients[0])) { pizzaMatchBasilButton.style('background-color', 'rgba(128, 128, 128, 0.7)'); }
        if (pizzaMatchSelectedCards.includes(pizzaMatchIngredients[1])) { pizzaMatchBroccoliButton.style('background-color', 'rgba(128, 128, 128, 0.7)'); }
        if (pizzaMatchSelectedCards.includes(pizzaMatchIngredients[2])) { pizzaMatchCheeseButton.style('background-color', 'rgba(128, 128, 128, 0.7)'); }
        if (pizzaMatchSelectedCards.includes(pizzaMatchIngredients[3])) { pizzaMatchJalapenosButton.style('background-color', 'rgba(128, 128, 128, 0.7)'); }
        if (pizzaMatchSelectedCards.includes(pizzaMatchIngredients[4])) { pizzaMatchMushroomsButton.style('background-color', 'rgba(128, 128, 128, 0.7)'); }
        if (pizzaMatchSelectedCards.includes(pizzaMatchIngredients[5])) { pizzaMatchOlivesButton.style('background-color', 'rgba(128, 128, 128, 0.7)'); }
        if (pizzaMatchSelectedCards.includes(pizzaMatchIngredients[6])) { pizzaMatchOnionsButton.style('background-color', 'rgba(128, 128, 128, 0.7)'); }
        if (pizzaMatchSelectedCards.includes(pizzaMatchIngredients[7])) { pizzaMatchPepperoniButton.style('background-color', 'rgba(128, 128, 128, 0.7)'); }
        if (pizzaMatchSelectedCards.includes(pizzaMatchIngredients[8])) { pizzaMatchPineappleButton.style('background-color', 'rgba(128, 128, 128, 0.7)'); }
        if (pizzaMatchSelectedCards.includes(pizzaMatchIngredients[9])) { pizzaMatchPorkButton.style('background-color', 'rgba(128, 128, 128, 0.7)'); }
        if (pizzaMatchSelectedCards.includes(pizzaMatchIngredients[10])) { pizzaMatchSpinachButton.style('background-color', 'rgba(128, 128, 128, 0.7)'); }
        if (pizzaMatchSelectedCards.includes(pizzaMatchIngredients[11])) { pizzaMatchTomatoButton.style('background-color', 'rgba(128, 128, 128, 0.7)'); }


        // display cook pizza button when 5 cards are selected
        if (pizzaMatchSelectedCards.length === 5) {
        cookPizzaButton.show();
        } else {
        cookPizzaButton.hide();
        }
    



    }
  
  
  
    // play again screen & reset game
    if (isPizzaMatchGameOver) {

      displayPizzaMatchCardsImage = false;
      cookPizzaButton.hide();
      pizzaMatchSelectedCards = [];

      
      if (pizzaMatchCorrectlyMatched) {
        pizzaMatchCorrectMatchTransition.play();
        pizzaMatchCorrectMatchTransition.show();
        correct_audio.play();
        
      } else {
        pizzaMatchIncorrectMatchTransition.play();
        pizzaMatchIncorrectMatchTransition.show();
        incorrect_audio.play();
      }
  
      isPizzaMatchGameOver = false;
    }
  
  
    
    
}





// isabelle, sheridan, & karan
function playWordScramble() {


    // timer
    wordScrambleElapsedTime = (millis() - wordScrambleStartTime) / 1000;
    wordScrambleRemainingTime = ceil(max(0, wordScrambleUnscrambleTime - wordScrambleElapsedTime));


    // setup
    switch (wordScrambleDifficulty) {
        case 'easy':
            wordScrambleUnscrambleTime = 31;
            setupWordScramble();
            break;
        case 'medium':
            wordScrambleUnscrambleTime = 21;
            setupWordScramble();
            break;
        case 'hard':
            wordScrambleUnscrambleTime = 11;
            setupWordScramble();
            break;
        default:
            break;
    }


}

// isabelle, sheridan, & karan
function setupWordScramble() {

    // backgrounds
    if (displayWordScrambleEasyImage) { background(wordScrambleEasyImage); }
    if (displayWordScrambleMediumImage) { background(wordScrambleMediumImage); }
    if (displayWordScrambleHardImage) { background(wordScrambleHardImage); }


    // select random word
    if (!isWordScrambleWordChosen) {
        let chosenWordIndex = Math.floor(Math.random() * wordScrambleScrambledWords.length);
        wordScrambleUnscrambledWord = wordScrambleUnscrambledWords[chosenWordIndex];
        wordScrambleScrambledWord = wordScrambleScrambledWords[chosenWordIndex];


        isWordScrambleWordChosen = true;
    }


    // text styling
    textSize(windowHeight/24);
    textFont('Courier New');
    textStyle(BOLD);
    fill(0);

    // display scrambled word
    if (wordScrambleRemainingTime > 0 && !isWordScrambleGameOver) {
        text('Unscramble This \n     Word\n\n'
            + "- " + wordScrambleScrambledWord + '\n\n\n'
            + '  You have '+ wordScrambleRemainingTime + '\n    seconds.'
             , windowWidth/2.55, windowHeight/4.4);
        
        wordScrambleInputField.show();
        wordScrambleInputField.changed(checkAnswer);
    }



    // check value
    function checkAnswer() {

        let answer = wordScrambleInputField.value();
        wordScrambleInputField.value("");

        if (answer === wordScrambleUnscrambledWord) {
            correct_audio.play();
            isWordScrambleWon = true;
            if (wordScrambleDifficulty === 'easy') {
                isWordScrambleGameOver = true;
                wordScrambleInputField.hide();
                displayWordScrambleEasyImage = false;
                displayWordScrambleMediumImage = false;
                displayWordScrambleHardImage = false;
                wordScrambleEasyWonTransition.play();
                wordScrambleEasyWonTransition.show();
            }
            if (wordScrambleDifficulty === 'medium') {
                isWordScrambleGameOver = true;
                wordScrambleInputField.hide();
                displayWordScrambleEasyImage = false;
                displayWordScrambleMediumImage = false;
                displayWordScrambleHardImage = false;
                wordScrambleMediumWonTransition.play();
                wordScrambleMediumWonTransition.show();
            }
            if (wordScrambleDifficulty === 'hard') {
                isWordScrambleGameOver = true;
                wordScrambleInputField.hide();
                displayWordScrambleEasyImage = false;
                displayWordScrambleMediumImage = false;
                displayWordScrambleHardImage = false;
                wordScrambleHardWonTransition.play();
                wordScrambleHardWonTransition.show();
            }
        }

    }



    // end game after timer runs out
    if (wordScrambleRemainingTime <= 0 && !isWordScrambleGameOver) {
        incorrect_audio.play();
        isWordScrambleGameOver = true;
        isWordScrambleWon = false;
        wordScrambleInputField.hide();
        displayWordScrambleEasyImage = false;
        displayWordScrambleMediumImage = false;
        displayWordScrambleHardImage = false;

        if (wordScrambleDifficulty === 'easy') {
            wordScrambleEasyLostTransition.play();
            wordScrambleEasyLostTransition.show();
        }
        if (wordScrambleDifficulty === 'medium') {
            wordScrambleMediumLostTransition.play();
            wordScrambleMediumLostTransition.show();
        }
        if (wordScrambleDifficulty === 'hard') {
            wordScrambleHardLostTransition.play();
            wordScrambleHardLostTransition.show();
        }
    }




}





// matthew
// Code inspired by Barney Codes -- https://www.youtube.com/@BarneyCodes -- [Stacker Game]
function playBlockStacker() {


    // background
    if (isBlockStackerPlaying) {
        background(blockStackerGameImage);
    }


    if (isBlockStackerPlaying) {
        updateBlock();
        drawBlocks();
    } else if (isBlockStackerGameLost) {
        blockStackerLostTransition.show();
        blockStackerLostTransition.play();
        isBlockStackerGameLost = false;
        isBlockStackerWon = false;
    } else if (isBlockStackerGameWon) {
        blockStackerWonTransition.show();
        blockStackerWonTransition.play();
        isBlockStackerGameWon = false;
        isBlockStackerWon = true;
    }


}

// matthew
// Code inspired by Barney Codes -- https://www.youtube.com/@BarneyCodes -- [Stacker Game]
function newBlockStackerGame() {

    blockHeight = height / 13.73
    blockWidth = width / 4.55

    currentBlock = createVector(0, height - blockHeight, blockWidth);

    blockDir = 1;
    if (blockStackerDifficulty === 'easy') {
        blockSpeed = 5;
    } else if (blockStackerDifficulty === 'medium') {
        blockSpeed = 7.5;
    } else if (blockStackerDifficulty === 'hard') {
        blockSpeed = 10;
    }

    placedBlocks = [];
}

// matthew
// Code inspired by Barney Codes -- https://www.youtube.com/@BarneyCodes -- [Stacker Game]
function drawBlocks() {
    image(woodTexture, currentBlock.x, currentBlock.y, currentBlock.z, blockHeight);


    for (let block of placedBlocks) {
        image(woodTexture, block.x, block.y, block.z, blockHeight);
    }

    // score text
    // textSize(100);
    // text(placedBlocks.length, 100, 100);
}

// matthew
// Code inspired by Barney Codes -- https://www.youtube.com/@BarneyCodes -- [Stacker Game]
function updateBlock() {
    currentBlock.x += blockDir * blockSpeed;

    if (currentBlock.x < 0) {
        blockDir = 1;
    }
    if (currentBlock.x + currentBlock.z > width) {
        blockDir = -1;
    }

}

// matthew
// Code inspired by Barney Codes -- https://www.youtube.com/@BarneyCodes -- [Stacker Game]
function keyReleased() {
    if (key === " " && currentState === 'blockStacker') {
        placeBlock();
    }
}

// matthew
// Code inspired by Barney Codes -- https://www.youtube.com/@BarneyCodes -- [Stacker Game]
function placeBlock() {

    const prevBlock = placedBlocks[placedBlocks.length - 1];
    let newWidth = blockWidth;

    if (prevBlock) {
        const leftEdge = max(prevBlock.x, currentBlock.x);
        const rightEdge = min(prevBlock.x + prevBlock.z, currentBlock.x + currentBlock.z);
        newWidth = rightEdge - leftEdge;
        currentBlock.x = leftEdge;
        currentBlock.z = newWidth;
    }


    if (newWidth < 0) {
        isBlockStackerPlaying = false;
        isBlockStackerGameLost = true;
        incorrect_audio.play();
        return;
    }


    placedBlocks.push(currentBlock);
    block_placing_audio.play();
    block_placing_audio.setVolume(3);
    blockSpeed *= 1.1;
    newBlock(newWidth);
}

// matthew
// Code inspired by Barney Codes -- https://www.youtube.com/@BarneyCodes -- [Stacker Game]
function newBlock(newWidth) {

    const blockStackHeight = (placedBlocks.length + 1) * blockHeight;
    if (blockStackHeight > height + height / 15) {
        isBlockStackerPlaying = false;
        isBlockStackerGameWon = true;
        correct_audio.play();
        return;
    }

    currentBlock = createVector(0, height - blockStackHeight, newWidth);
}





// EXTRA METHODS ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


// karan
// Code inspired by ChatGPT -- https://chat.openai.com/ -- [Sorting Arrays]
function checkIngredientMatches() {
    if (pizzaMatchSelectedCards.length === pizzaMatchTargetIngredients.length) {
  
  
        // Sort both arrays to compare them regardless of click order
        let sortedClicked = [...pizzaMatchSelectedCards].sort();
        let sortedTarget = [...pizzaMatchTargetIngredients].sort();
  
  
        // Check if arrays match
        let isMatch = sortedClicked.every((ingredient, index) => ingredient === sortedTarget[index]);
  
        if (isMatch) {
            return true;
        }
    }
    return false;
}





